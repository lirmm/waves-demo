# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-09-08 13:41
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import smart_selects.db_fields


def move_from_input(apps, schema_editor):
    ServiceOutput = apps.get_model('waves', 'ServiceOutput')
    ServiceOutputFromInputSubmission = apps.get_model('waves', 'ServiceOutputFromInputSubmission')
    for srv_output in ServiceOutput.objects.all():
        # for all existing output associate
        if srv_output.related_from_input is not None:
            # output is issued from an input
            ServiceOutputFromInputSubmission.objects.create(srv_output=srv_output,
                                                            submission=srv_output.related_from_input.service,
                                                            srv_input=srv_output.related_from_input)


def remove_from_input(apps, schema_editor):
    # Nothing to do because we only add new data in other function
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('waves', '0005_auto_20160908_0937'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceOutputFromInputSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('srv_input', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='submission', chained_model_field='service', help_text='Output is valued from an input', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_outputs', to='waves.BaseInput')),
            ],
            options={
                'db_table': 'waves_service_output_submission',
                'verbose_name': 'From Input',
            },
        ),
        migrations.DeleteModel(
            name='CitationMeta',
        ),
        migrations.DeleteModel(
            name='CommandLineMeta',
        ),
        migrations.DeleteModel(
            name='DocumentationMeta',
        ),
        migrations.DeleteModel(
            name='DownloadLinkMeta',
        ),
        migrations.DeleteModel(
            name='FeatureMeta',
        ),
        migrations.DeleteModel(
            name='MiscellaneousMeta',
        ),
        migrations.DeleteModel(
            name='RelatedPaperMeta',
        ),
        migrations.DeleteModel(
            name='WebSiteMeta',
        ),
        migrations.RenameField(
            model_name='serviceoutput',
            old_name='from_input_pattern',
            new_name='file_pattern'
        ),
        migrations.AlterField(
            model_name='serviceoutput',
            name='file_pattern',
            field=models.CharField(blank=True, help_text="Format related input value with '%s' if needed", max_length=100, null=True, verbose_name='File name'),
        ),
        migrations.RenameField(
            model_name='serviceoutput',
            old_name='from_input',
            new_name='related_from_input',
        ),
        migrations.AddField(
            model_name='serviceoutput',
            name='from_input',
            field=models.BooleanField(default=False, help_text='Is valuated from an input value'),
        ),
        migrations.AddField(
            model_name='serviceoutputfrominputsubmission',
            name='srv_output',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_input_submission', to='waves.ServiceOutput'),
        ),
        migrations.AddField(
            model_name='serviceoutputfrominputsubmission',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_outputs', to='waves.ServiceSubmission'),
        ),
        migrations.RunSQL('UPDATE waves_service_output SET from_input = 1 WHERE related_from_input_id is not NULL'),
        migrations.RunPython(move_from_input, remove_from_input),

    ]
