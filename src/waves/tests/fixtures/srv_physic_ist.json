[
{
  "model": "waves.servicecategory",
  "fields": {
    "order": 0,
    "description": "<p>This is long description</p>",
    "short_description": "This is short description",
    "api_name": "supertrees",
    "name": "Supertrees",
    "ref": "",
    "lft": 2,
    "rght": 3,
    "tree_id": 1,
    "level": 1
  }
},
{
  "model": "waves.runner",
  "fields": {
    "description": "<p>Our SGE server allow to run scripts on mutiple calculation cluster...</p>\r\n\r\n<p>See text is rendered <u><strong>in HTML</strong></u></p>",
    "short_description": null,
    "name": "SGE Job Runner",
    "available": true,
    "clazz": "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
  }
},
{
  "model": "waves.servicerunnerparam",
  "fields": {
    "service": [
      "physic_ist",
      "1.0",
      3
    ],
    "param": [
      "command",
      [
        "SGE Job Runner",
        "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
      ]
    ],
    "_value": null
  }
},
{
  "model": "waves.servicerunnerparam",
  "fields": {
    "service": [
      "physic_ist",
      "1.0",
      3
    ],
    "param": [
      "queue",
      [
        "SGE Job Runner",
        "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
      ]
    ],
    "_value": null
  }
},
{
  "model": "waves.servicerunnerparam",
  "fields": {
    "service": [
      "physic_ist",
      "1.0",
      3
    ],
    "param": [
      "protocol",
      [
        "SGE Job Runner",
        "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
      ]
    ],
    "_value": null
  }
},
{
  "model": "waves.service",
  "fields": {
    "created": "2016-06-20T10:38:08Z",
    "updated": "2016-10-27T09:21:07Z",
    "description": "<h3>Options</h3>\r\n\r\n<p><a name=\"source\"></a>Source tree file<br />\r\nThe input source tree file contains source trees encoded in standard Newick format, possibly containing edge lengths and bootstrap values.<br />\r\nBelow is an example of the Newick format for a tree containing bootstrap values and edge lengths:<br />\r\n<img alt=\"PhySIC_IST source tree\" src=\"http://www.atgc-montpellier.fr/pictures/img_physic_ist_source.png\" title=\"PhySIC_IST source tree\" /></p>\r\n\r\n<p><a name=\"backbone\"></a>Backbone tree (optional)<br />\r\nYou have the possibility to input a starting backbone tree in which missing taxa of the source trees are inserted. This file contains the backbone tree you proposed. This backbone tree is possibly simplified if not satisfying the PC property.</p>\r\n\r\n<p><a name=\"outgroup\"></a>Outgroups for tree rooting (optional)<br />\r\nWhen PhySIC_IST is provided with unrooted source trees, it first has to root them. To that purpose, the software incorporates a rooting tool that automates the procedure. This tool accepts as input different outgroup levels, specified in the outgroup file. Each level is a list of comma-separated taxa. Each level of outgroup must be divided from the next one by a line break.<br />\r\nThe rooting procedure considers each unrooted source tree separately. For a given source tree T, it determines the first level of outgroup that contains one or more taxa of T. Then the tree is rooted on the branch leading to the smallest subtree hosting all outgroup taxa of this level present in the tree. In other words, unrooted source trees are rooted on the branch leading to the outgroup that is the farthest from the ingroup. If the proposed outgroup is not monophyletic, the tree T is discarded from the analysis. This procedure does not alter the resolution inside the ingroup nor in the different outgroup levels that can be present in the tree.<br />\r\nBelow is an example of the format suitable for outgroup_File:</p>\r\n\r\n<pre>\r\nMonodelphis\r\nEchinops, Loxodonta, Dasypus\r\n     </pre>\r\n\r\n<p>Using the specified outgroup levels, the unrooted tree:<br />\r\n<img alt=\"PhySIC_IST unrooted tree\" src=\"http://www.atgc-montpellier.fr/pictures/img_physic_ist_outgroup_1.png\" title=\"PhySIC_IST unrooted tree\" /><br />\r\nwill become:<br />\r\n<img alt=\"PhySIC_IST unrooted tree\" src=\"http://www.atgc-montpellier.fr/pictures/img_physic_ist_outgroup_2.png\" title=\"PhySIC_IST unrooted tree\" /><br />\r\n<br />\r\nThe unrooted tree:<br />\r\n<img alt=\"PhySIC_IST unrooted tree\" src=\"http://www.atgc-montpellier.fr/pictures/img_physic_ist_outgroup_3.png\" title=\"PhySIC_IST unrooted tree\" /><br />\r\nis discarded from the analysis because none of the outgroups taxa are present in the tree.<br />\r\n<br />\r\nThe unrooted tree:<br />\r\n<img alt=\"PhySIC_IST unrooted tree\" src=\"http://www.atgc-montpellier.fr/pictures/img_physic_ist_outgroup_4.png\" title=\"PhySIC_IST unrooted tree\" /><br />\r\nis discarded from the analysis because the outgroup (Dasypus, Echinops) is not monophyletic.</p>\r\n\r\n<p><a name=\"bootstrap\"></a>Bootstrap threshold for source clade selection<br />\r\nBefore computing the supertree, the program first collapses source tree branches having a bootstrap proportion (bp) lower than the indicated threshold. Hence, only significantly supported clades are considered for supertree building (this is especially important with veto supertree methods). For instance, if bps range from 1 to 100 in the source trees (as in the above example), you can typically use 70 as a clade selection threshold.<br />\r\nSource trees that do not contain bp are not affected by this collapsing step. Thus, the input file can contain a mix of trees with bps and trees without. Note that trees with only some bp missing, are not considered by the collapsing step. If you do not want the program to collapse branches at all, just set the treshold value to 0.</p>\r\n\r\n<p><a name=\"correction\"></a>Correction threshold for anomalies detection<br />\r\nThe correction threshold is the threshold used by the STC (Source Tree Correction) preprocess, aiming to detect anomalies in the source trees (e.g., resulting from paralogy, HGT events or long branch attraction).<br />\r\nThe STC preprocess detects incongruences in the source trees on the basis of triplets of taxa present in the source trees. When conflicting resolutions are observed among source trees for the same three taxa, STC drops the resolutions that are statistically less supported. This is achieved by a Chi-Square test comparing the frequencies with which the conflicting resolutions respectively appear. The correction threshold is a real value between 0 and 1. The higher it is, the larger the difference between frequencies of conflicting resolutions has to be in order for STC to drop the least frequent alternatives. In other words, setting the correction threshold to 1 impedes STC to drop any input triplet, hence leaves the source trees as they are, while setting it to 0 implies removing from the source trees any contradicted triplet (e.g. ab|c) that is globally less frequent that an alternative resolution (e.g. ac|b). In the former case, PhySIC_IST behaves as a pure veto method, while in the latter case it mimics a voting (i.e., liberal) supertree method.<br />\r\nWhen STC drops some triplets, the source trees are modified in order that those triplets are not displayed anymore.</p>\r\n\r\n<hr />\r\n<h3>Results</h3>\r\n\r\n<p>With the above example input file you will obtain the following supertree in setting the bootstrap threshold to 60:<br />\r\n<img alt=\"PhySIC_IST supertree\" src=\"http://www.atgc-montpellier.fr/pictures/img_physic_ist_supertree.png\" title=\"PhySIC_IST supertree\" /><br />\r\n<br />\r\nThe supertree inferred by PhySIC_IST is outputted in Newick format. It can be visualized with usual tree viewing/editing softwares such as <a href=\"http://www.treedyn.org\" target=\"_blank\">TreeDyn</a>, <a href=\"http://darwin.zoology.gla.ac.uk/%7Erpage/treeviewx/download.html\" target=\"_blank\">Treeview X</a> or <a href=\"http://www-ab.informatik.uni-tuebingen.de/software/dendroscope/welcome.html\" target=\"_blank\">DendroScope</a>.</p>\r\n\r\n<p>PhySIC_IST also outputs the list of input taxa not inserted in the supertree (if any) and the value of the CIC for the proposed supertree. The CIC value measures the informativeness of the supertree (see the <a href=\"http://www.atgc-montpellier.fr/physic_ist/paper.php\">paper</a> for details).</p>\r\n\r\n<p>PhySIC_IST also outputs a &quot;newForest&quot; file. This file will contain the modified source trees.</p>",
    "short_description": "PhySIC_IST: cleaning source trees to infer more informative supertrees.\r\nScornavacca C., Berry V., Lefort V., Douzery E.J.P., Ranwez V.\r\nBMC Bioinformatics. 2008, Oct 4;9:413.",
    "api_name": "physic_ist",
    "name": "Physic_IST",
    "version": "1.0",
    "run_on": [
      "SGE Job Runner",
      "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
    ],
    "clazz": "",
    "category": [
      "supertrees"
    ],
    "status": 3,
    "api_on": true,
    "web_on": true,
    "email_on": true,
    "partial": false,
    "created_by": 5,
    "restricted_client": []
  }
},
{
  "model": "waves.servicesubmission",
  "fields": {
    "created": "2016-09-06T09:18:06Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 0,
    "slug": "5b91b573-465b-443f-bb99-9039c98248fd",
    "api_name": "default",
    "label": "default",
    "default": true,
    "available_online": true,
    "available_api": true,
    "service": [
      "physic_ist",
      "1.0",
      3
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 0,
    "description": "<p>The source trees have to be contained in a text file (e.g., named &quot;sourceTreeFile&quot;) with trees written in the Newick format.</p>",
    "short_description": null,
    "label": "Source Tree File",
    "name": "s",
    "default": "",
    "type": "file",
    "param_type": 2,
    "format": "",
    "mandatory": true,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 1,
    "description": "<p>The user has the possibility to input a starting backbone tree in which missing taxa of the source trees are inserted. The file myTreeFile contains the backbone tree proposed by the user. This backbone tree is possibly simplified if not satisfying the PC property.</p>",
    "short_description": null,
    "label": "Backbone Tree File",
    "name": "t",
    "default": "",
    "type": "file",
    "param_type": 2,
    "format": "",
    "mandatory": false,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 2,
    "description": "<p>The boostrap_threshold is an unbounded positive number. Before running the actual algorithm, PhySIC_IST collapses the branches with a bootstrap value smaller than the indicated boostrap_threshold (if your bootstrap values are numbers between A and B, I suggest to set your treshold value in this range!). Branches of the source trees without bootstrap value are not collapsed.</p>",
    "short_description": null,
    "label": "Use bootstrap threshold ?",
    "name": "boostrap_select",
    "default": "False",
    "type": "boolean",
    "param_type": 0,
    "format": "",
    "mandatory": false,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 3,
    "description": "<p>The correction_threshold is the threshold used by the STC (Source Tree Correction) preprocess, aiming to detect anomalies in the source trees (e.g., resulting from paralogy, HGT events or long branch attraction). The STC preprocess detects incongruences in the source trees on the basis of triplets of taxa present in the source trees. When conflicting resolutions are observed among source trees for the same three taxa, STC drops the resolutions that are statistically less supported. This is achieved by a Chi-Square test comparing the frequencies with which the conflicting resolutions respectively appear. The correction_threshold is a real value between 0 and 1. The higher it is, the smaller the difference between frequencies of conflicting resolutions has to be in order for STC to drop the least frequent alternatives. In other words, setting correction_threshold to 1 impedes STC to drop any input triplet, while setting it to 0 implies dropping any contradicted triplet that is less frequent that another triplet contradicting it. In the former case, PhySIC_IST behaves as a pure veto method, while in the latter case it mimics a voting (i.e., liberal) supertree method.</p>",
    "short_description": null,
    "label": "Use correction threshold ?",
    "name": "correction_threshold",
    "default": "False",
    "type": "boolean",
    "param_type": 0,
    "format": "",
    "mandatory": false,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 4,
    "description": "<p>newForestFile is the name of the file where the method outputs the modified source trees. This option is relevant only with -b and -c options.</p>",
    "short_description": null,
    "label": "New Forest File",
    "name": "f",
    "default": "newForest.txt",
    "type": "text",
    "param_type": 2,
    "format": "",
    "mandatory": false,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-06T09:18:06Z",
    "order": 5,
    "description": "<p>When PhySIC_IST is provided with unrooted source trees, it first has to root them. To that purpose, the software incorporates a rooting tool that automates the procedure. This tool accepts as input different outgroup levels, specified in the file named outgroup_File. Each level is a list of comma-separated taxa. Each level of outgroup must be divided from the next one by a line break. The rooting procedure considers each unrooted source tree separately. For a given source tree T, it determines the first level of outgroup that contains one or more taxa of T. Then the tree is rooted on the branch leading to the smallest subtree hosting all outgroup taxa of this level present in the tree. In other words, unrooted source trees are rooted on the branch leading to the outgroup that is the farthest from the ingroup. If the proposed outgroup is not monophyletic, the tree T is discarded from the analysis. This procedure does not alter the resolution inside the ingroup nor in the different outgroup levels that can be present in the tree.</p>",
    "short_description": null,
    "label": "Outgroup File",
    "name": "r",
    "default": "",
    "type": "file",
    "param_type": 2,
    "format": "",
    "mandatory": false,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.relatedinput",
  "fields": {
    "when_value": "True",
    "related_to": [
      "Use bootstrap threshold ?",
      "boostrap_select",
      "False",
      [
        "default",
        [
          "physic_ist",
          "1.0",
          3
        ]
      ]
    ]
  }
},
{
  "model": "waves.relatedinput",
  "fields": {
    "when_value": "True",
    "related_to": [
      "Use correction threshold ?",
      "correction_threshold",
      "False",
      [
        "default",
        [
          "physic_ist",
          "1.0",
          3
        ]
      ]
    ]
  }
},
{
  "model": "waves.serviceinput",
  "fields": {
    "polymorphic_ctype": [
      "waves",
      "serviceinput"
    ],
    "created": "2016-07-15T12:45:49Z",
    "updated": "2016-10-27T08:26:17Z",
    "order": 6,
    "description": "<p>This is the file which contains the PhySIC_IST supertree</p>",
    "short_description": "This is the file which contains the PhySIC_IST supertree",
    "label": "Output file name",
    "name": "o",
    "default": "physic_ist_tree.txt",
    "type": "text",
    "param_type": 2,
    "format": "",
    "mandatory": false,
    "multiple": false,
    "editable": true,
    "display": "select",
    "service": [
      "default",
      [
        "physic_ist",
        "1.0",
        3
      ]
    ]
  }
},
{
  "model": "waves.servicemeta",
  "pk": 113,
  "fields": {
    "order": 0,
    "description": "<p>./PhySIC_IST -s sourceTreeFile -o outTreePath -t myTreeFile -b boostrap_threshold -c correction_threshold -f newForestFile -r outgroupsFile</p>",
    "short_description": null,
    "type": "cmd",
    "title": "Usage",
    "value": "Command line",
    "is_url": false,
    "service": [
      "physic_ist",
      "1.0",
      3
    ]
  }
},
{
  "model": "waves.servicemeta",
  "pk": 114,
  "fields": {
    "order": 1,
    "description": "<p>&quot;PhySIC_IST: cleaning source trees to infer more informative supertrees.&quot; Scornavacca C., Berry V., Lefort V., Douzery E.J.P. and Ranwez V. BMC Bioinformatics. 2008, Oct 4;9:413</p>",
    "short_description": null,
    "type": "cite",
    "title": "Please cite",
    "value": "http://mbe.oxfordjournals.org/content/early/2015/06/29/molbev.msv150.abstract?keytype=ref&ijkey=nzj33seASld27Gs",
    "is_url": true,
    "service": [
      "physic_ist",
      "1.0",
      3
    ]
  }
},
{
  "model": "waves.servicemeta",
  "pk": 115,
  "fields": {
    "order": 2,
    "description": "",
    "short_description": null,
    "type": "website",
    "title": "Papers and contact",
    "value": "http://www.atgc-montpellier.fr/physic_ist/paper.php",
    "is_url": true,
    "service": [
      "physic_ist",
      "1.0",
      3
    ]
  }
},
{
  "model": "waves.servicemeta",
  "pk": 116,
  "fields": {
    "order": 3,
    "description": "",
    "short_description": null,
    "type": "download",
    "title": "Download program",
    "value": "http://www.atgc-montpellier.fr/physic_ist/binaries.php",
    "is_url": true,
    "service": [
      "physic_ist",
      "1.0",
      3
    ]
  }
},
{
  "model": "waves.serviceoutput",
  "pk": 159,
  "fields": {
    "created": "2016-06-21T09:39:15Z",
    "updated": "2016-09-12T13:48:04Z",
    "order": 0,
    "description": "<p>The supertree inferred by PhySIC_IST is outputted in Newick format in the command-line terminal.</p>",
    "short_description": "Inferred supertree computed bu Physic_ist",
    "name": "Inferred supertree",
    "service": [
      "physic_ist",
      "1.0",
      3
    ],
    "related_from_input": [
      "Output file name",
      "o",
      "physic_ist_tree.txt",
      [
        "default",
        [
          "physic_ist",
          "1.0",
          3
        ]
      ]
    ],
    "from_input": true,
    "ext": "txt",
    "may_be_empty": false,
    "file_pattern": "%s"
  }
},
{
  "model": "waves.serviceoutput",
  "pk": 166,
  "fields": {
    "created": "2016-07-15T12:47:42Z",
    "updated": "2016-09-12T13:48:04Z",
    "order": 1,
    "description": "<p>Contains the new source trees after they have been corrected for detected anomalies with respect to other source trees</p>",
    "short_description": "",
    "name": "New source trees",
    "service": [
      "physic_ist",
      "1.0",
      3
    ],
    "related_from_input": [
      "New Forest File",
      "f",
      "newForest.txt",
      [
        "default",
        [
          "physic_ist",
          "1.0",
          3
        ]
      ]
    ],
    "from_input": true,
    "ext": "txt",
    "may_be_empty": true,
    "file_pattern": "%s"
  }
},
{
  "model": "waves.runnerparam",
  "fields": {
    "name": "command",
    "default": null,
    "runner": [
      "SGE Job Runner",
      "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
    ],
    "prevent_override": false
  }
},
{
  "model": "waves.runnerparam",
  "fields": {
    "name": "queue",
    "default": "mainqueue",
    "runner": [
      "SGE Job Runner",
      "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
    ],
    "prevent_override": false
  }
},
{
  "model": "waves.runnerparam",
  "fields": {
    "name": "protocol",
    "default": "sge",
    "runner": [
      "SGE Job Runner",
      "waves_adaptors.saga_adaptor.ClusterJobAdaptor"
    ],
    "prevent_override": true
  }
}
]